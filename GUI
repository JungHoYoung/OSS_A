package oss_mine;

import javax.print.DocFlavor.URL;
import javax.swing.*;
import javax.swing.event.MenuListener;
import java.awt.color.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;

public class mine extends JFrame {
	JPanel 		jp 		=	new JPanel(); // 패널 1
	JPanel 		jp2		=	new JPanel(); // 패널 2
	JButton 	reset	=	new JButton(); // 리셋 버튼 설정
	Random 		rnd 	=	new Random(); // 랜덤함수
	int[][] 	mine 	=	new int[10][10]; // 지뢰판 설정
	int[][] 	mine2 	=	new int[15][15];
	int[][]	 	mine3 	=	new int[20][20];
	JButton 	jb[][] 	=	new JButton[10][10]; // 버튼 10x10 생성
	JButton 	jb2[][] = 	new JButton[15][15]; // 버튼 20x20 생성
	JButton     jb3[][]	= 	new JButton[20][20]; // 버튼 30x30 생성
	JMenuBar	 mb 	=	new JMenuBar();
	JMenu 		menu 	=	new JMenu("파일");
	JLabel[]	lbl		=	new JLabel[10];
	ImageIcon icon0 = new ImageIcon("images/mine0.png");
	ImageIcon icon1 = new ImageIcon("images/mine1.png");
	ImageIcon icon2 = new ImageIcon("images/mine2.png");
	ImageIcon icon3 = new ImageIcon("images/mine3.png");
	ImageIcon icon4 = new ImageIcon("images/mine4.png");
	ImageIcon icon5 = new ImageIcon("images/mine5.png");
	ImageIcon icon6 = new ImageIcon("images/mine6.png");
	ImageIcon icon7 = new ImageIcon("images/mine7.png");
	ImageIcon icon8 = new ImageIcon("images/mine8.png");
	ImageIcon icon9 = new ImageIcon("images/mine9.png");
	ImageIcon icon_mine = new ImageIcon("images/mine.png");
	
	

public mine() {
	super("지뢰찾기"); // 타이틀
	if(level == 0) // 레벨값을 전역변수로 설정함.
		level = 1; // 지역변수로 선언시 안먹혔음 왜 일까
	if(level == 1) {

		menu.add(new JMenuItem("새로 시작하기")).addActionListener(new ActionListener() { // 메뉴바에서 다시하기 클릭
			public void actionPerformed(ActionEvent e) { dispose();	new mine();	} });
		menu.addSeparator(); // 줄긋기
		menu.add(new JMenuItem("초급")).addActionListener(new ActionListener() { // 메뉴바 초급메뉴 선택
			public void actionPerformed(ActionEvent e) { dispose();	new mine();	} });
		menu.add(new JMenuItem("중급")).addActionListener(new ActionListener() { // 메뉴바 초급메뉴 선택
			public void actionPerformed(ActionEvent e) {level = 2;	dispose();	new mine();	} });
		menu.add(new JMenuItem("고급")).addActionListener(new ActionListener() { // 메뉴바 초급메뉴 선택
			public void actionPerformed(ActionEvent e) {level = 3;	dispose();	new mine();	} });
		menu.addSeparator(); // 메뉴바에 줄긋기
		menu.add(new JMenuItem("종료")).addActionListener(new ActionListener() { // 메뉴바 종료메뉴 선택
			public void actionPerformed(ActionEvent e) {System.exit(0);} });
	    	// 하나의 프레임만 쓰기 때문에 dispose()만 해도 실행프로그램이 백그라운드에 남아 있지 않지만
	    	// 여러개의 프레임이 필요해지는 경우에는 이 명령어를 사용할 것
		mb.add(menu); // 메뉴바에 메뉴를 add
	
		this.setJMenuBar(mb);
		this.setLayout(new BorderLayout());
		add(jp);
		add(jp2, "North");
		jp2.add(reset); // 패널에 리셋 버튼 추가
		
		reset.setText("리셋"); // 리셋 버튼 텍스트 설정
		reset.setPreferredSize(new Dimension(260, 30)); // 리셋버튼 사이즈 조정
		reset.addActionListener(new ActionListener() { // 리셋버튼 눌렀을때
			public void actionPerformed(ActionEvent e) {
				JOptionPane.showMessageDialog(null, "'리셋'되었습니다.");
				dispose();
				new mine();
			}
		});

		for(; ; ) {
			for(int i, j, count = 0; count < 10;) {
				i=rnd.nextInt(10);
				j=rnd.nextInt(10);
				if(mine[i][j] != -1) {
					mine[i][j] = -1;
					count++;
				}
			}
			break;
		}
	
		for(int i = 0; i < 10; i++) { // 버튼배열 생성
			for(int j = 0; j < 10; j++) {
			if(mine[i][j] == 0) { // mine배열 i위치가 0일경우
				jb[i][j] = new JButton();
				jb[i][j].setPreferredSize(new Dimension(20, 20));
				jb[i][j].addActionListener(new ButtonListener()); // 버튼 리스너 생성
    	
				jp.add(jb[i][j]);
			}
			else if(mine[i][j] != 0) { // mine배열 i위치가 0이 아닐경우
				jb[i][j] = new JButton();
				jb[i][j].setPreferredSize(new Dimension(20, 20));
				jb[i][j].addActionListener(new MineListener()); // 마인 리스너 생성
				jb[i][j].setText("1"); /////////////////////////////////////// 구분하기 위해 설정함. 마지막에 지울것
				jp.add(jb[i][j]);
				
			}
			}
		}
		
		for(int i=0; i<10; i++) { // 지뢰 주변 숫자 채우기
			for(int j=0; j<10; j++) {
				int count=0;
				if(mine[i][j] != -1) {
					if(i >= 0 && j >= 0 && i <= 9 && j <= 9) {
						if(i-1 >= 0 && j-1 >= 0)
							if(mine[i-1][j-1] == -1) count ++;
						if(i-1 >= 0)
							if(mine[i-1][j] == -1) count ++;
						if(i-1 >= 0 && j+1 <= 9)
							if(mine[i-1][j+1] == -1) count ++;
						if(j-1 >= 0)
							if(mine[i][j-1] == -1) count ++;
						if(j+1 <= 9)
							if(mine[i][j+1] == -1) count ++;
						if(i+1 <= 9 && j-1 >= 0)
							if(mine[i+1][j-1] == -1) count ++;
						if(i+1 <= 9)
							if(mine[i+1][j] == -1) count ++;
						if(i+1 <= 9 && j+1 <= 9)
							if(mine[i+1][j+1] == -1) count ++;
					}
					mine[i][j] = count;
				}
				count = 0;
			}
		}
		
		setVisible(true); // 프레임 보이기
		setSize(280, 360); // 프레임 사이즈 설정 윈도우
//		setSize(260, 350);
//		setResizable(false); // 창 사이즈 변경 불가
		this.setLocationRelativeTo(null); // 화면 중앙에 띄우기
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // X 누르면 닫기
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	if(level == 2) {
		setResizable(true); // 창 사이즈 변경 불가
		JMenuBar mb = new JMenuBar();
		JMenu menu = new JMenu("파일");

		menu.add(new JMenuItem("새로 시작하기")).addActionListener(new ActionListener() { // 메뉴바에서 다시하기 클릭
			public void actionPerformed(ActionEvent e) {
				dispose();
				new mine();
			}
		});
		menu.addSeparator(); // 줄긋기
		menu.add(new JMenuItem("초급")).addActionListener(new ActionListener() { // 메뉴바 초급메뉴 선택
			public void actionPerformed(ActionEvent e) {
				level = 1;
				dispose();
				new mine();
			}
		});
		menu.add(new JMenuItem("중급")).addActionListener(new ActionListener() { // 메뉴바 초급메뉴 선택
			public void actionPerformed(ActionEvent e) { // 이미 레벨값이 2임
				dispose();
				new mine();
			}
		});
		menu.add(new JMenuItem("고급")).addActionListener(new ActionListener() { // 메뉴바 초급메뉴 선택
			public void actionPerformed(ActionEvent e) {
				level = 3;
				dispose();
				new mine();
			}
		});
	
		menu.addSeparator(); // 메뉴바에 줄긋기
	
		menu.add(new JMenuItem("종료")).addActionListener(new ActionListener() { // 메뉴바 종료메뉴 선택
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
	    	// 우리는 하나의 프레임만 쓰기 때문에 dispose()만 해도 실행프로그램이 백그라운드에 남아 있지 않지만
	    	// 여러개의 프레임이 필요해지는 경우에는 이 명령어를 사용할 것
			}
		});
		mb.add(menu); // 메뉴바에 메뉴를 add
	
		this.setJMenuBar(mb);
	
		this.setLayout(new BorderLayout());
		add(jp);
		add(jp2, "North");
		jp2.add(reset); // 패널에 리셋 버튼 추가
		
		reset.setText("리셋"); // 리셋 버튼 텍스트 설정
		reset.setPreferredSize(new Dimension(260, 30)); // 리셋버튼 사이즈 조정
		reset.addActionListener(new ActionListener() { // 리셋버튼 눌렀을때
			public void actionPerformed(ActionEvent e) {
				JOptionPane.showMessageDialog(null, "'리셋'되었습니다.");
				dispose();
				new mine();
			}
		});

		for(; ; ) {
			for(int i, j, count = 0; count < 30;) {
				i=rnd.nextInt(15);
				j=rnd.nextInt(15);
				if(mine2[i][j] != -1) {
					mine2[i][j] = -1;
					count++;
				}
			}
			break;
		}
	
		for(int i = 0; i < 15; i++) { // 버튼배열 생성
			for(int j = 0; j < 15; j++) {
			if(mine2[i][j] == 0) { // mine배열 i위치가 0일경우
				jb2[i][j] = new JButton();
				jb2[i][j].setPreferredSize(new Dimension(20,20));
				jb2[i][j].addActionListener(new ButtonListener()); // 버튼 리스너 생성
    	
				jp.add(jb2[i][j]);
			}
			else if(mine2[i][j] != 0) { // mine배열 i위치가 0이 아닐경우
				jb2[i][j] = new JButton();
				jb2[i][j].setPreferredSize(new Dimension(20,20));
				jb2[i][j].addActionListener(new MineListener()); // 마인 리스너 생성
				jp.add(jb2[i][j]);
				
			}
			}
		}
		for(int i=0; i<15; i++) { // 지뢰 주변 숫자 채우기
			for(int j=0; j<15; j++) {
				int count=0;
				if(mine2[i][j] != -1) {
					if(i >= 0 && j >= 0 && i <= 14 && j <= 14) {
						if(i-1 >= 0 && j-1 >= 0)
							if(mine2[i-1][j-1] == -1) count ++;
						if(i-1 >= 0)
							if(mine2[i-1][j] == -1) count ++;
						if(i-1 >= 0 && j+1 <= 14)
							if(mine2[i-1][j+1] == -1) count ++;
						if(j-1 >= 0)
							if(mine2[i][j-1] == -1) count ++;
						if(j+1 <= 14)
							if(mine2[i][j+1] == -1) count ++;
						if(i+1 <= 14 && j-1 >= 0)
							if(mine2[i+1][j-1] == -1) count ++;
						if(i+1 <= 14)
							if(mine2[i+1][j] == -1) count ++;
						if(i+1 <= 14 && j+1 <= 14)
							if(mine2[i+1][j+1] == -1) count ++;
					}
					mine2[i][j] = count;
				}
				count = 0;
			}
		}
		
		setVisible(true); // 프레임 보이기
		setSize(400, 490); // 프레임 사이즈 설정
		setResizable(false); // 창 사이즈 변경 불가
		this.setLocationRelativeTo(null); // 화면 중앙에 띄우기
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // X 누르면 닫기
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	if(level == 3) {
		JMenuBar mb = new JMenuBar();
		JMenu menu = new JMenu("파일");

		menu.add(new JMenuItem("새로 시작하기")).addActionListener(new ActionListener() { // 메뉴바에서 다시하기 클릭
			public void actionPerformed(ActionEvent e) {
					dispose();
					new mine();
			}
		});
		menu.addSeparator(); // 줄긋기
		menu.add(new JMenuItem("초급")).addActionListener(new ActionListener() { // 메뉴바 초급메뉴 선택
			public void actionPerformed(ActionEvent e) {
				level = 1;
				dispose();
				new mine();
			}
		});
		menu.add(new JMenuItem("중급")).addActionListener(new ActionListener() { // 메뉴바 초급메뉴 선택
			public void actionPerformed(ActionEvent e) {
				level = 2;
				dispose();
				new mine();
			}
		});
		menu.add(new JMenuItem("고급")).addActionListener(new ActionListener() { // 메뉴바 초급메뉴 선택
			public void actionPerformed(ActionEvent e) { // 이미 레벨값이 3임
				dispose();
				new mine();
			}
		});
	
		menu.addSeparator(); // 메뉴바에 줄긋기
	
		menu.add(new JMenuItem("종료")).addActionListener(new ActionListener() { // 메뉴바 종료메뉴 선택
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
	    	// 우리는 하나의 프레임만 쓰기 때문에 dispose()만 해도 실행프로그램이 백그라운드에 남아 있지 않지만
	    	// 여러개의 프레임이 필요해지는 경우에는 이 명령어를 사용할 것
			}
		});
		mb.add(menu); // 메뉴바에 메뉴를 add
	
		this.setJMenuBar(mb);
	
		this.setLayout(new BorderLayout());
		add(jp);
		add(jp2, "North");
		jp2.add(reset); // 패널에 리셋 버튼 추가
		
		reset.setText("리셋"); // 리셋 버튼 텍스트 설정
		reset.setPreferredSize(new Dimension(260, 30)); // 리셋버튼 사이즈 조정
		reset.addActionListener(new ActionListener() { // 리셋버튼 눌렀을때
			public void actionPerformed(ActionEvent e) {
				JOptionPane.showMessageDialog(null, "'리셋'되었습니다.");
					dispose();
					new mine();
			}
		});

		for(; ; ) {
			for(int i, j, count = 0; count < 40;) {
				i=rnd.nextInt(20);
				j=rnd.nextInt(20);
				if(mine3[i][j] != -1) {
					mine3[i][j] = -1;
					count++;
				}
			}
			break;
		}
	
		for(int i = 0; i < 20; i++) { // 버튼배열 생성
			for(int j = 0; j < 20; j++) {
			if(mine3[i][j] == 0) { // mine배열 i,j 위치의 값이 0일경우
				jb3[i][j] = new JButton();
				jb3[i][j].setPreferredSize(new Dimension(20,20));
				jb3[i][j].addActionListener(new ButtonListener()); // 버튼 리스너 생성
				jp.add(jb3[i][j]);
			}
			else if(mine3[i][j] != 0) { // mine배열 i,j 위치의 값이 0이 아닐경우
				jb3[i][j] = new JButton();
				jb3[i][j].setPreferredSize(new Dimension(20,20));
				jb3[i][j].addActionListener(new MineListener()); // 마인 리스너 생성
				jp.add(jb3[i][j]);
			}
		}
	}
		for(int i=0; i<20; i++) { // 지뢰 주변 숫자 채우기
			for(int j=0; j<20; j++) {
				int count=0;
				if(mine3[i][j] != -1) {
					if(i >= 0 && j >= 0 && i <= 19 && j <= 19) {
						if(i-1 >= 0 && j-1 >= 0)
							if(mine3[i-1][j-1] == -1) count ++;
						if(i-1 >= 0)
							if(mine3[i-1][j] == -1) count ++;
						if(i-1 >= 0 && j+1 <= 19)
							if(mine3[i-1][j+1] == -1) count ++;
						if(j-1 >= 0)
							if(mine3[i][j-1] == -1) count ++;
						if(j+1 <= 19)
							if(mine3[i][j+1] == -1) count ++;
						if(i+1 <= 19 && j-1 >= 0)
							if(mine3[i+1][j-1] == -1) count ++;
						if(i+1 <= 19)
							if(mine3[i+1][j] == -1) count ++;
						if(i+1 <= 19 && j+1 <= 19)
							if(mine3[i+1][j+1] == -1) count ++;
					}
					mine3[i][j] = count;
				}
				count = 0;
			}
		}
		
		
		setVisible(true); // 프레임 보이기
		setSize(520, 610); // 프레임 사이즈 설정
		setResizable(false); // 창 사이즈 변경 불가
		this.setLocationRelativeTo(null); // 화면 중앙에 띄우기
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // X 누르면 닫기
	}
}

private class ButtonListener implements ActionListener  { // 지뢰가 아닌 버튼 클릭
	public void actionPerformed(ActionEvent e) {
		int temp = 0;
		if(level == 1) {
			for(int i = 0; i < 10; i++) {
				for(int j = 0; j < 10; j++) {
					if(e.getSource() == jb[i][j]) {
						check(i, j);
					}
				}
			}
		}
		if(level == 2) {
			for(int i = 0; i < 15; i++) {
				for(int j = 0; j < 15; j++) {
					if(e.getSource() == jb2[i][j]) {
						check(i, j);
					}
				}
			}
		}
		if(level == 3) {
			for(int i = 0; i < 20; i++) {
				for(int j = 0; j < 20; j++) {
					if(e.getSource() == jb3[i][j]) {
						check(i, j);
					}
				}
			}
		}
	}
}

private class MineListener implements ActionListener  { // 지뢰 클릭
	public void actionPerformed(ActionEvent e) {
		JOptionPane.showMessageDialog(null, "아쉽습니다. 지뢰를 클릭했습니다.");
		
		if(level == 1) {
			for(int i = 0; i < 10; i++) {
				for(int j = 0; j < 10; j++) {
					if(mine[i][j] == -1)
						jb[i][j].setIcon(icon_mine);
					jb[i][j].setEnabled(false);
					
				}
			}
		}
		if(level == 2) {
			for(int i = 0; i < 15; i++) {
				for(int j = 0; j < 15; j++) {
					if(mine2[i][j] == -1)
						jb2[i][j].setIcon(icon_mine);
					jb2[i][j].setEnabled(false);
				}
			}
		}
		if(level == 3) {
			for(int i = 0; i < 20; i++) {
				for(int j = 0; j < 20; j++) {
					if(mine3[i][j] == -1)
						jb3[i][j].setIcon(icon_mine);
					jb3[i][j].setEnabled(false);
				}
			}
		}
	}
}

private void check(int i, int j) {
	if(level == 1) {
		try {
			if(mine[i][j] == 0 && jb[i][j].isEnabled() == true) {
				jb[i][j].setIcon(icon0);
				jb[i][j].setEnabled(false);
				check(i+1, j);
				check(i-1, j);
				check(i, j+1);
				check(i, j-1);
				check(i+1, j+1);
				check(i-1, j-1);
				check(i-1, j+1);
				check(i+1, j-1);
			}
			else {
				if(jb[i][j].isEnabled() == true) {
					jb[i][j].setText(""+mine[i][j]);
					switch(mine[i][j]) {
					case 1:
						jb[i][j].setIcon(icon1);
						break;
					case 2:
						jb[i][j].setIcon(icon2);
						break;
					case 3:
						jb[i][j].setIcon(icon3);
						break;
					case 4:
						jb[i][j].setIcon(icon4);
						break;
					case 5:
						jb[i][j].setIcon(icon5);
						break;
					case 6:
						jb[i][j].setIcon(icon6);
						break;
					case 7:
						jb[i][j].setIcon(icon7);
						break;
					case 8:
						jb[i][j].setIcon(icon8);
						break;
					case 9:
						jb[i][j].setIcon(icon9);
						break;
					}
				}
			}
		}
		catch(java.lang.ArrayIndexOutOfBoundsException e){
			
		}
	}
	if(level == 2) {
		try {
			if(mine2[i][j] == 0 && jb2[i][j].isEnabled() == true) {
				jb2[i][j].setIcon(icon0);
				jb2[i][j].setEnabled(false);
				check(i+1, j);
				check(i-1, j);
				check(i, j+1);
				check(i, j-1);
				check(i+1, j+1);
				check(i-1, j-1);
				check(i-1, j+1);
				check(i+1, j-1);
			}
			else {
				if(jb2[i][j].isEnabled() == true) {
					jb2[i][j].setText(""+mine2[i][j]);
					jb2[i][j].setEnabled(false);
				}
			}
		}
		catch(java.lang.ArrayIndexOutOfBoundsException e){
			
		}
	}
	if(level == 3) {
		try {
			if(mine3[i][j] == 0 && jb3[i][j].isEnabled() == true) {
				jb3[i][j].setIcon(icon0);
				jb3[i][j].setEnabled(false);
				check(i+1, j);
				check(i-1, j);
				check(i, j+1);
				check(i, j-1);
				check(i+1, j+1);
				check(i-1, j-1);
				check(i-1, j+1);
				check(i+1, j-1);
			}
			else {
				if(jb3[i][j].isEnabled() == true) {
					jb3[i][j].setText(""+mine3[i][j]);
					jb3[i][j].setEnabled(false);
					switch(mine[i][j]) {
					case 1:
						jb3[i][j].setIcon(icon1);
						break;
					case 2:
						jb3[i][j].setIcon(icon2);
						break;
					case 3:
						jb3[i][j].setIcon(icon3);
						break;
					case 4:
						jb3[i][j].setIcon(icon4);
						break;
					case 5:
						jb3[i][j].setIcon(icon5);
						break;
					case 6:
						jb3[i][j].setIcon(icon6);
						break;
					case 7:
						jb3[i][j].setIcon(icon7);
						break;
					case 8:
						jb3[i][j].setIcon(icon8);
						break;
					case 9:
						jb3[i][j].setIcon(icon9);
						break;
					}
				}
			}
		}
		catch(java.lang.ArrayIndexOutOfBoundsException e){
			
		}
	}
}

public static void main(String[] args) {
	// TODO Auto-generated method stub
	new mine(); // 프레임 불러오기
	}static int level = 0;
}

// 11.26
 // 버튼 사이즈 조절, 지뢰 범위 설정, 난이도별 
 
 // 11.26
 // 버튼 사이즈 조절, 지뢰 범위 설정, 난이도별 
 
 // 11.26
 // 버튼 사이즈 조절, 지뢰 범위 설정, 난이도별 
 // 모든 난이도에 리셋버튼 추가 / 아직 작동은 안됨
 // 지뢰판 클릭했을때 사용할 액션 리스너 베이스 깔아두고 주석처리 함
 
 // 11.26
 // 지뢰 클릭시 패널 닫고 다시 호출 기능 추가
 /* 이제 지뢰가 아닌 부분을 클릭했을때 버튼을 블럭 시키면서 숫자를 표시해주는 기능 추가
    깃발 세우는 기능만 추가 하면 일단락 할듯 */ 
 
 // 11.26
 // 게임 중 난이도 변경을 위해 메뉴바 생성 [작동은 안됨]
 
 // 11.27
 // 메뉴바 기능 및 난이도 선택 기능 추가중
 
 // 11.27
 // 전면 수정
 // 지뢰인 버튼과 일반 버튼의 리스너를 별도 설정
 // 메뉴바에 있는 아이템 리스너 설정 및 일반 버튼 클릭시 이벤트만 설정하면 마무리될듯
 
 // 11.28
 // 메뉴아이템 리스너 설정 끝남.
 // 버튼 배열 생성이 30x30이 안되고 23x20에서 자꾸 멈춰서 10, 15, 20 으로 변경
 // 자꾸 이상해서 지금 백업 하나 
 
 // 11.28
 // 지뢰가 아닌 버튼 클릭시 해당 버튼의 값 가져오는것 찾음
 // 이제 진짜 마지막 구간만 남음
 // 주변구간에 지뢰가 없으면 한꺼번에 파는거랑
 // 주변구간에 지뢰가 있으면 숫자 띄우는거
 // 한꺼번에 파는건 지금 이대로 enable값에 false만 줘도 될거 같은데
 // 숫자 띄우는건 작은 15*15 ~ 20*20사이의 이미지가 필요할듯
 
 // 11.28
 // 지뢰 주변에 숫자 띄우는거 구성함
 
 // 11.29
 // 다 끝나감
 
 // 11.29
 // 버튼 클릭시 나오는 숫자를 이미지로 변경함
 // 지뢰 클릭시 모든 지뢰 표시도 이미지로 변경함
 // 이미지 사이즈 조절만 따로 해주면 되고, 리셋버튼만들고
 // 시간 여유가 되면 깃발 표시까지 추가하고 안되면 어쩔수 
